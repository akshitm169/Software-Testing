@startuml
actor User as user
participant "BookGenics" as BookGenics
participant "Database" as Database

user->BookGenics: Register
BookGenics->Database: User Registered
user->BookGenics: Login
BookGenics->Database: Details Checked

alt if user is registered
    BookGenics<-- Database: Valid User
    user<-BookGenics: Login Successful
else else
    BookGenics<-- Database: Invalid User
    user<-BookGenics: Login Rejected
end

user->BookGenics: Sort Books
user<--BookGenics: Books Shown

user->BookGenics: Filter Books
BookGenics->Database: Filtering Books
BookGenics<--Database: Filtered Books
user<--BookGenics: Books Shown

user->BookGenics: Read Content
BookGenics->Database: Get Content
BookGenics<--Database: Content
user<--BookGenics: Show Content


user->BookGenics: Update/Detete Book
BookGenics->Database: Book Updated/Deleted

user->BookGenics: Favourite/Unfavourite Book
BookGenics->Database: Book Favourited/Unfavourited

user->BookGenics: Input Book for prediction
user<--BookGenics: Predicted Genres 

user->BookGenics: Add Book
BookGenics->Database: Book Searching 

alt if book is not found in database 
    BookGenics<-- Database: Book not found
    BookGenics-> Database: Adding Book
    BookGenics<- Database: Book added
    user<-BookGenics: Request Successful 
else else
    BookGenics<-- Database: Book found
    user<-BookGenics: Request Rejected 
end

user->BookGenics: Change userdata
BookGenics->Database: Userdata changed


user->BookGenics: Logout
user<-BookGenics: Logout Successful
@enduml